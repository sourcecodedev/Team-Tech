//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTestProjectTech.ServiceServicios {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TypeServices", Namespace="http://schemas.datacontract.org/2004/07/ServicesTech.Dominio")]
    [System.SerializableAttribute()]
    public partial class TypeServices : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Name_TypeServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeServicesIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name_TypeServices {
            get {
                return this.Name_TypeServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.Name_TypeServicesField, value) != true)) {
                    this.Name_TypeServicesField = value;
                    this.RaisePropertyChanged("Name_TypeServices");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TypeServicesId {
            get {
                return this.TypeServicesIdField;
            }
            set {
                if ((this.TypeServicesIdField.Equals(value) != true)) {
                    this.TypeServicesIdField = value;
                    this.RaisePropertyChanged("TypeServicesId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Services", Namespace="http://schemas.datacontract.org/2004/07/ServicesTech.Dominio")]
    [System.SerializableAttribute()]
    public partial class Services : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Name_ServicesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceTotalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServicesIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private UnitTestProjectTech.ServiceServicios.TypeServices TypeServicesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name_Services {
            get {
                return this.Name_ServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.Name_ServicesField, value) != true)) {
                    this.Name_ServicesField = value;
                    this.RaisePropertyChanged("Name_Services");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal PriceTotal {
            get {
                return this.PriceTotalField;
            }
            set {
                if ((this.PriceTotalField.Equals(value) != true)) {
                    this.PriceTotalField = value;
                    this.RaisePropertyChanged("PriceTotal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServicesId {
            get {
                return this.ServicesIdField;
            }
            set {
                if ((this.ServicesIdField.Equals(value) != true)) {
                    this.ServicesIdField = value;
                    this.RaisePropertyChanged("ServicesId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public UnitTestProjectTech.ServiceServicios.TypeServices TypeServices {
            get {
                return this.TypeServicesField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeServicesField, value) != true)) {
                    this.TypeServicesField = value;
                    this.RaisePropertyChanged("TypeServices");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceServicios.IServiceServicios")]
    public interface IServiceServicios {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceServicios/ListarTypeServices", ReplyAction="http://tempuri.org/IServiceServicios/ListarTypeServicesResponse")]
        UnitTestProjectTech.ServiceServicios.TypeServices[] ListarTypeServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceServicios/ListarTypeServices", ReplyAction="http://tempuri.org/IServiceServicios/ListarTypeServicesResponse")]
        System.Threading.Tasks.Task<UnitTestProjectTech.ServiceServicios.TypeServices[]> ListarTypeServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceServicios/ListarServicesbyType", ReplyAction="http://tempuri.org/IServiceServicios/ListarServicesbyTypeResponse")]
        UnitTestProjectTech.ServiceServicios.Services[] ListarServicesbyType(int TypeServicesId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceServicios/ListarServicesbyType", ReplyAction="http://tempuri.org/IServiceServicios/ListarServicesbyTypeResponse")]
        System.Threading.Tasks.Task<UnitTestProjectTech.ServiceServicios.Services[]> ListarServicesbyTypeAsync(int TypeServicesId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceServiciosChannel : UnitTestProjectTech.ServiceServicios.IServiceServicios, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceServiciosClient : System.ServiceModel.ClientBase<UnitTestProjectTech.ServiceServicios.IServiceServicios>, UnitTestProjectTech.ServiceServicios.IServiceServicios {
        
        public ServiceServiciosClient() {
        }
        
        public ServiceServiciosClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceServiciosClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceServiciosClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceServiciosClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UnitTestProjectTech.ServiceServicios.TypeServices[] ListarTypeServices() {
            return base.Channel.ListarTypeServices();
        }
        
        public System.Threading.Tasks.Task<UnitTestProjectTech.ServiceServicios.TypeServices[]> ListarTypeServicesAsync() {
            return base.Channel.ListarTypeServicesAsync();
        }
        
        public UnitTestProjectTech.ServiceServicios.Services[] ListarServicesbyType(int TypeServicesId) {
            return base.Channel.ListarServicesbyType(TypeServicesId);
        }
        
        public System.Threading.Tasks.Task<UnitTestProjectTech.ServiceServicios.Services[]> ListarServicesbyTypeAsync(int TypeServicesId) {
            return base.Channel.ListarServicesbyTypeAsync(TypeServicesId);
        }
    }
}
